This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-20T07:11:51.697Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    build-pdf.yml
    create-issue.yml
    deploy.yml
    lint-text.yml
  ISSUE_TEMPLATE.md
.husky/
  .gitignore
  pre-commit
docs/
  .vitepress/
    components/
      ContentsContainer.vue
      GitHubRepositories.vue
      NoteArticles.vue
      QiitaArticles.vue
      SpeakerDeckSlides.vue
      ZennArticles.vue
    data/
      lapras.data.ts
    theme/
      index.css
      index.ts
    config.mts
    types.ts
  public/
    favicon/
      browserconfig.xml
      safari-pinned-tab.svg
      site.webmanifest
  index.md
pdf-configs/
  config.js
  style.css
.gitignore
.textlintrc
package.json
postcss.config.js
README.ja.md
README.md
tailwind.config.js
vite-env.d.ts

================================================================
Repository Files
================================================================

================
File: .github/workflows/build-pdf.yml
================
# This workflow is set up to build a PDF and upload it as part of a release
# when a tag is pushed to the repository.
name: build pdf

on:
  push:
    tags:
    - 'v*' # Triggers on Push to Tag (v*): The workflow is triggered when you push a tag that starts with v (e.g., v1.0.0).

jobs:
  build:
    name: build pdf and upload release
    runs-on: ubuntu-latest
    steps:
      # uses the actions/checkout@v4 action to check out the code from the repository.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # sets up Node.js using the version specified in the package.json file and caches dependencies using Yarn.
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'yarn'
      # Installs all the project dependencies with "yarn install --frozen-lockfile".
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      # generate a PDF (from Markdown).
      - name: build pdf
        run: yarn run build:pdf
      # creates a release using actions/create-release@v1.
      # The release name and tag come from the GitHub ref (the tag that triggered the workflow).
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      # The generated PDF (located at ./docs/index.pdf) is uploaded to the release as an asset.
      - name: upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./docs/index.pdf
          asset_name: index.pdf
          asset_content_type: application/pdf

================
File: .github/workflows/create-issue.yml
================
# This workflow is scheduled to create an issue every three months,
# reminding you to update the resume or project.
name: create issue

# Trigger on Schedule: The workflow uses a cron job (0 0 1 */3 *), which runs on the 1st day of every third month.
on:
  schedule:
    - cron:  '0 0 1 */3 *'

jobs:
  build:
    name: create issue
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checkout Code: first it checks out the repository.
      - uses: JasonEtco/create-an-issue@v2 # Uses JasonEtco/create-an-issue@v2 to create a new issue. This is a custom action designed to open issues with pre-defined content.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

================
File: .github/workflows/deploy.yml
================
# This workflow deploys the VitePress site to GitHub Pages, a static documentation site.
name: Deploy VitePress site to Pages

# Triggers on Push to Main or Master Branch:
# This workflow is triggered when changes are pushed to the main or master branch, or manually via workflow_dispatch.
on:
  push:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * 0' # It also runs on a schedule (0 0 * * 0): it deploys the site automatically every Sunday at midnight.

# Sets permissions for the workflow to read contents and write to GitHub Pages.
permissions:
  contents: read
  pages: write
  id-token: write

# Concurrency Group: Ensures that only one deployment job runs at a time.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # Build: This job runs on Ubuntu, checks out the code, installs Node.js and dependencies, and builds the site with VitePress using yarn run docs:build.
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks out the code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Install Node.js and dependencies
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: yarn
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      # Builds the site with VitePress using yarn run docs:build
      - name: Build with VitePress
        run: yarn run docs:build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

  # Deploy: This step deploys the built site to GitHub Pages using actions/deploy-pages@v4.
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

================
File: .github/workflows/lint-text.yml
================
# This workflow is responsible for linting text files in your repository,
# ensuring that they follow defined rules for grammar, spelling, and formatting.
name: lint text

# Trigger on Push: This workflow runs whenever a new commit is pushed to the repository.
on:
  push:

jobs:
  build:
    name: lint text
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checkout the repository
      - uses: actions/setup-node@v4 # Install Node.js and Dependencies: It sets up Node.js and installs project dependencies via Yarn.
        with:
          node-version-file: 'package.json'
          cache: 'yarn'
      - run: yarn install
      # Lint Text: Runs a linting command (yarn run lint) to check for text errors in the project.
      - name: lint text
        run: yarn run lint

================
File: .github/ISSUE_TEMPLATE.md
================
---
title: ËÅ∑ÂãôÁµåÊ≠¥Êõ∏„ÇíÊõ¥Êñ∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„Äê{{ date | date('YYYY/MM/DD') }}„Äë
assignees: chihiroanihr
labels: enhancement
---

ÂõõÂçäÊúü„ÅåÁµåÈÅé„Åó„Åæ„Åó„Åü„ÄÇ  
„Åì„ÅÆÊúüÈñì„ÅÆÊàêÊûú„ÇíËÅ∑ÂãôÁµåÊ≠¥Êõ∏„Å´Ë®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

================
File: .husky/.gitignore
================
_

================
File: .husky/pre-commit
================
#!/bin/sh
. "$(dirname $0)/_/husky.sh"

npm run lint

================
File: docs/.vitepress/components/ContentsContainer.vue
================
<template>
  <div class="relative">
    <div class="overflow-x-auto whitespace-nowrap flex" ref="scrollContainer">
      <article v-for="content in contents" :key="content.url" class="shrink-0 px-2">
        <template v-if="content.ogImage">
        <a :href="content.url" target="_blank" rel="noopener noreferrer" class="relative">
          <img :src="content.ogImage" :alt="content.title" class="h-32 w-auto object-cover rounded-lg shadow-md"/>
          <div v-if="content.isOverlayTitle" class="absolute w-full h-full flex justify-center items-center bg-[rgba(0,0,0,0.4)] p-4 top-0 left-0">
            <p class="truncate text-white">{{ content.title }}</p>
          </div>
        </a>
        </template>
      </article>
      <article class="shrink-0 px-5 grid place-items-center bg-opacity-50">
        <a class="" :href="moreLink" target="_blank">
          üëâ more...
        </a>
      </article>
    </div>
    <div :class="{'before-backdrop': true, 'opacity-0': hideBeforeBackdrop}" />
    <div :class="{'after-backdrop': true, 'opacity-0': hideAfterBackdrop}" />
  </div>
</template>

<script setup lang="ts">
import { computed, ref } from 'vue'
import { useScroll } from '@vueuse/core';

type content = {
  isOverlayTitle: boolean
  title: string
  url: string
  ogImage: string | null
}

defineProps<{
  contents: content[]
  moreLink: string
}>()

const scrollContainer = ref<HTMLElement | null>(null);
const { arrivedState } = useScroll(scrollContainer);

const hideBeforeBackdrop = computed(() => arrivedState.left);
const hideAfterBackdrop = computed(() => arrivedState.right);
</script>

<style lang="scss" scoped>
.before-backdrop {
  left: 0;
  background: linear-gradient(to left, rgba(var(--vp-c-bg-rgb), 0) 0%, rgba(var(--vp-c-bg-rgb), 100) 100%);
}

.after-backdrop {
  right: 0;
  background: linear-gradient(to right, rgba(var(--vp-c-bg-rgb), 0) 0%, rgba(var(--vp-c-bg-rgb), 100) 100%);
}

.after-backdrop, .before-backdrop {
  pointer-events: none;
  position: absolute;
  cursor: pointer;
  top: 0;
  width: 80px;
  height: 100%;
}
</style>

================
File: docs/.vitepress/components/GitHubRepositories.vue
================
<template>
  <div>
    <table>
      <thead>
        <tr>
          <th>Repository</th>
          <th>languages</th>
          <th>Stars</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="repository in repositories" :key="repository.id">
          <td>
            <a :href="repository.url" target="_blank" rel="noopener noreferrer">
              {{ repository.title }}
            </a>
          </td>
          <td>
            <div class="flex gap-2 flex-wrap">
              <img v-for="language in repository.languages" :key="language.name" :src="deviconSrc(language.name)"
                :alt="language.name" class="w-4" />
            </div>
          </td>
          <td>‚≠ê {{ repository.stargazers_count }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script setup lang="ts">
import { data } from '../data/lapras.data.ts'
const repositories = data.githubRepositories
const deviconSrc = (name: string) => {
  let langName = name.toLowerCase()
  switch (langName) {
    case 'html':
      langName = 'html5'
      break
    case 'css':
      langName = 'css3'
      break
    case 'shell':
      langName = 'bash'
      break
    case 'tsx':
      langName = 'typescript'
      break
    case 'vue':
      langName = 'vuejs'
      break
    case 'scss':
      langName = 'sass'
      break
  }
  return `https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/${langName}/${langName}-original.svg`
}

</script>

<style lang="scss" scoped></style>

================
File: docs/.vitepress/components/NoteArticles.vue
================
<template>
  <div>
    <ContentsContainer :contents="contents" more-link="https://note.com/ryo_kawamata"/>
  </div>
</template>

<script setup lang="ts">
import { data } from '../data/lapras.data.ts'
import ContentsContainer from './ContentsContainer.vue';

const contents = data.noteArticles.map((note) => {
  return {
    isOverlayTitle: true,
    title: note.title,
    url: note.url,
    ogImage: note.ogImage as string
  }
})
</script>

<style lang="scss" scoped></style>

================
File: docs/.vitepress/components/QiitaArticles.vue
================
<template>
  <div>
    <ContentsContainer :contents="contents" more-link="https://qiita.com/ryo2132" />
  </div>
</template>

<script setup lang="ts">
import { data } from '../data/lapras.data.ts'
import ContentsContainer from './ContentsContainer.vue';

const contents = data.qiitaArticles.map((article) => {
  return {
    isOverlayTitle: false,
    title: article.title,
    url: article.url,
    ogImage: article.ogImage as string
  }
})
</script>

<style lang="scss" scoped></style>

================
File: docs/.vitepress/components/SpeakerDeckSlides.vue
================
<template>
  <div>
    <ContentsContainer :contents="contents" more-link="https://speakerdeck.com/rhina-kim"/>
  </div>
</template>

<script setup lang="ts">
import { data } from '../data/lapras.data.ts'
import ContentsContainer from './ContentsContainer.vue';

const contents = data.speakerDeckSlides.map((slide) => {
  return {
    isOverlayTitle: false,
    title: slide.title,
    url: slide.url,
    ogImage: slide.ogImage as string
  }
})
</script>

<style lang="scss" scoped></style>

================
File: docs/.vitepress/components/ZennArticles.vue
================
<template>
  <div>
    <ContentsContainer :contents="contents" more-link="https://zenn.dev/ryo_kawamata"/>
  </div>
</template>

<script setup lang="ts">
import { data } from '../data/lapras.data.ts'
import ContentsContainer from './ContentsContainer.vue';

const contents = data.zennArticles.map((article) => {
  return {
    isOverlayTitle: false,
    title: article.title,
    url: article.url,
    ogImage: article.ogImage as string
  }
})
</script>

<style lang="scss" scoped></style>

================
File: docs/.vitepress/data/lapras.data.ts
================
import { ofetch } from "ofetch";
import { laprasData, LaprasResponse } from "../types";
import ogs from 'open-graph-scraper';

const getOgImage = async (url: string) => {
  try {
    const ogData = await ogs({ url })
    if (ogData.result.success && ogData.result.ogImage?.length) {
      return ogData.result.ogImage[0].url
    }
    throw new Error('could not fetch og image');
  } catch (e) {
    console.error(e)
  }
  return null
}

import { defineLoader } from 'vitepress'

export type Data = laprasData;

declare const data: Data
export { data }

export default defineLoader({
  async load(): Promise<Data> {
    try {
      const res = await ofetch<LaprasResponse>('https://lapras.com/public/rhina-kim.json')
      const zennArticles = await Promise.all(res.zenn_articles.slice(0, 10).map(async article => ({
        ...article,
        ogImage: await getOgImage(article.url)
      })))
      const speakerDeckSlides = await Promise.all(res.speaker_deck_slides.slice(0, 10).map(async slide => ({
        ...slide,
        ogImage: await getOgImage(slide.url)
      })))
      const noteArticles = await Promise.all(res.note_articles.slice(0, 10).map(async article => ({
        ...article,
        ogImage: await getOgImage(article.url)
      })))
      const qiitaArticles = await Promise.all(res.qiita_articles.slice(0, 10).map(async article => ({
        ...article,
        ogImage: await getOgImage(article.url)
      })))
      const githubRepositories = await Promise.all(res.github_repositories.filter(
        // „Éï„Ç©„Éº„ÇØ„Åï„Çå„Åü„É™„Éù„Ç∏„Éà„É™„ÇíÈô§Â§ñ
        repo => repo.is_owner
      ).sort(
        // „Çπ„Çø„ÉºÊï∞„ÅÆÈôçÈ†Ü„Åß„ÇΩ„Éº„Éà
        (a, b) => Number(b.stargazers_count) - Number(a.stargazers_count)
      ).slice(0, 10).map(async repo => ({
        ...repo,
        ogImage: await getOgImage(repo.url)
      })))
      return {
        zennArticles,
        speakerDeckSlides,
        noteArticles,
        qiitaArticles,
        githubRepositories,
      }
    } catch (e) {
      console.error(e)
      throw e
    }
  }
})

================
File: docs/.vitepress/theme/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --vp-c-bg: #ffffff;
  --vp-c-bg-rgb: 255, 255, 255;
}

.dark {
  --vp-c-bg: #1b1b1f;
  --vp-c-bg-rgb: 27, 27, 31;
}

================
File: docs/.vitepress/theme/index.ts
================
import type { Theme } from 'vitepress'
import DefaultTheme from 'vitepress/theme'
import ZennArticles from '../components/ZennArticles.vue'
import GitHubRepositories from '../components/GitHubRepositories.vue'
import NoteArticles from '../components/NoteArticles.vue'
import QiitaArticles from '../components/QiitaArticles.vue'
import SpeakerDeckSlides from '../components/SpeakerDeckSlides.vue'
import '../../../node_modules/devicon/devicon.min.css'
import './index.css'

export default {
  extends: DefaultTheme,
  enhanceApp({ app }) {
    app.component('ZennArticles', ZennArticles)
    app.component('GitHubRepositories', GitHubRepositories)
    app.component('NoteArticles', NoteArticles)
    app.component('QiitaArticles', QiitaArticles)
    app.component('SpeakerDeckSlides', SpeakerDeckSlides)
  }
} satisfies Theme

================
File: docs/.vitepress/config.mts
================
import { defineConfig } from 'vitepress'

// https://vitepress.dev/reference/site-config
export default defineConfig({
  title: "ÈáëÊÇßÂ®ú„ÅÆËÅ∑ÂãôÁµåÊ≠¥Êõ∏",
  description: "ÈáëÊÇßÂ®ú„ÅÆËÅ∑ÂãôÁµåÊ≠¥Êõ∏",
  base: '/resume/',
  head: [
    // favicons
    ['link', { rel: 'apple-touch-icon', sizes: '180x180', href: 'favicon/apple-touch-icon.png' }],
    ['link', { rel: 'icon', type: 'image/png', sizes: '32x32', href: 'favicon/favicon-32x32.png' }],
    ['link', { rel: 'icon', type: 'image/png', sizes: '16x16', href: 'favicon/favicon-16x16.png' }],
    ['link', { rel: 'manifest', href: 'favicon/site.webmanifest' }],
    ['link', { rel: 'mask-icon', href: 'favicon/safari-pinned-tab.svg', color: '#5bbad5' }],
    ['meta', { name: 'msapplication-TileColor', content: '#da532c' }],
    ['meta', { name: 'theme-color', content: '#ffffff' }],
    // ogp
    ['meta', { property: 'og:image', content: 'https://chihiroanihr.github.io/resume/images/og.png' }],
    ['meta', { property: 'og:title', content: 'Resume of Rhina Kim' }],
    ['meta', { property: 'og:description', content: 'Rhina Kim\'s Resume - Creative Engineer (JA)' }],
    ['meta', { property: 'og:url	', content: 'https://chihiroanihr.github.io/resume' }]
  ],
  themeConfig: {
    nav: [
      { text: 'Home', link: '/' },
    ],
    sidebar: [],
    outline: {
      level: [2, 3]
    },
    socialLinks: [
      { icon: 'github', link: 'https://github.com/chihiroanihr/resume' }
    ],
    editLink: {
      pattern: 'https://github.com/chihiroanihr/resume/edit/master/docs/:path'
    }
  },
  lastUpdated: true,
})

================
File: docs/.vitepress/types.ts
================
export type LaprasResponse = {
  name: string; // LAPRASÁôªÈå≤„ÅÆ„É¶„Éº„Ç∂„ÉºÂêç
  description: string; // LAPRASÁôªÈå≤„ÅÆbio,
  e_score: number; // ÊäÄË°ìÂäõ„Çπ„Ç≥„Ç¢,
  b_score: number; // „Éì„Ç∏„Éç„ÇπÂäõ„Çπ„Ç≥„Ç¢,
  i_score: number; // ÂΩ±ÈüøÂäõ„Çπ„Ç≥„Ç¢,
  qiita_articles: { // QiitaË®ò‰∫ã
    title: string;
    url: string;
    tags: string[];
    headlines: string[];
    stockers_count: number;
    updated_at: string;
  }[];
  zenn_articles: { // ZennË®ò‰∫ã
    title: string;
    url: string;
    tags: string[];
    posted_at: string;
  }[];
  blog_articles: { // „Éñ„É≠„Ç∞Ë®ò‰∫ã
    title: string;
    url: string;
    tags: string[];
    posted_at: string;
  }[];
  note_articles: { // noteË®ò‰∫ã
    url: string;
    title: string;
    tags: string[];
    like_count: number;
    published_at: string;
  }[];
  speaker_deck_slides: { // speaker deck„Çπ„É©„Ç§„Éâ
    title: string;
    description: string;
    url: string;
    star_count: number;
    view_count: number;
    presentation_date: string;
  }[];
  github_repositories: { // github„É™„Éù„Ç∏„Éà„É™
    id: number;
    title: string;
    url: string;
    is_oss: boolean;
    is_fork: boolean;
    is_owner: true;
    description: string;
    stargazers_count: string;
    stargazers_url: string;
    forks: number;
    contributors_count: number;
    contributors_url: string;
    contributions: number;
    contributions_url: string;
    language: string;
    languages: {
      name: string;
      bytes: number;
    }[];
  }[];
  teratail_replies: { // teratailÂõûÁ≠î
    url: string;
    title: string;
    tags: string[];
    is_best_answer: boolean;
    created_at: string;
  }[];
  events: { // connpass„Ç§„Éô„É≥„Éà
    title: string;
    url: string;
    status: number;
    date: string;
    is_presenter: boolean;
    is_organizer: boolean;
  }[];
  activities: { // ActivityLog
    title: string;
    url: string;
    date: string;
    type:
      | "github"
      | "github_pr"
      | "speaker_deck"
      | "qiita"
      | "zenn"
      | "note"
      | "teratail"
      | "blog"
      | "connpass";
  }[];
};

export type ArticleWithOGImage<T> = T & {
  ogImage: string | null;
};

export type laprasData = {
  zennArticles: ArticleWithOGImage<LaprasResponse['zenn_articles'][number]>[];
  speakerDeckSlides: ArticleWithOGImage<LaprasResponse['speaker_deck_slides'][number]>[];
  noteArticles: ArticleWithOGImage<LaprasResponse['note_articles'][number]>[];
  qiitaArticles: ArticleWithOGImage<LaprasResponse['qiita_articles'][number]>[];
  githubRepositories: ArticleWithOGImage<LaprasResponse['github_repositories'][number]>[];
}

================
File: docs/public/favicon/browserconfig.xml
================
<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square150x150logo src="/mstile-150x150.png"/>
            <TileColor>#da532c</TileColor>
        </tile>
    </msapplication>
</browserconfig>

================
File: docs/public/favicon/safari-pinned-tab.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="512.000000pt" height="512.000000pt" viewBox="0 0 512.000000 512.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.14, written by Peter Selinger 2001-2017
</metadata>
<g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M2369 5066 c-2 -2 -38 -6 -79 -10 -41 -3 -84 -8 -95 -10 -11 -2 -40
-7 -65 -11 -78 -13 -92 -16 -175 -35 -662 -156 -1247 -583 -1590 -1162 -200
-336 -309 -673 -342 -1063 -12 -139 -5 -436 12 -526 3 -13 7 -41 11 -64 37
-257 161 -607 290 -822 10 -17 36 -60 57 -95 31 -52 97 -146 134 -193 271
-337 562 -571 929 -745 89 -42 304 -127 344 -135 8 -2 49 -12 90 -24 105 -28
246 -56 335 -66 156 -18 208 -21 361 -19 178 3 210 5 339 23 558 82 1054 329
1445 720 364 365 592 789 690 1282 22 112 24 129 36 279 12 147 6 397 -11 503
-2 12 -6 38 -9 57 -5 34 -34 185 -40 205 -1 6 -8 30 -15 55 -8 25 -14 50 -15
55 -6 29 -48 150 -75 219 -249 624 -746 1126 -1376 1388 -231 97 -444 151
-730 187 -66 8 -448 14 -456 7z"/>
</g>
</svg>

================
File: docs/public/favicon/site.webmanifest
================
{
    "name": "",
    "short_name": "",
    "icons": [
        {
            "src": "/android-chrome-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "/android-chrome-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ],
    "theme_color": "#ffffff",
    "background_color": "#ffffff",
    "display": "standalone"
}

================
File: docs/index.md
================
---
layout: doc
---



# ËÅ∑ÂãôÁµåÊ≠¥Êõ∏

## Âü∫Êú¨ÊÉÖÂ†±

| key      | value                                                         |
| -------- | ------------------------------------------------------------- |
| Ê∞èÂêç     | Èáë„ÄÄÊÇßÂ®úÔºàRhina KimÔºâ                                         |
| ÁîüÂπ¥ÊúàÊó• | 1999/03/03                                                    |
| Â±Ö‰ΩèÂú∞   | Êù±‰∫¨ :left_right_arrow: „É¢„É≥„Éà„É™„Ç™„Éº„É´                        |
| ÊúÄÁµÇÂ≠¶Ê≠¥ | „Ç≥„É≥„Ç≥„É´„Éá„Ç£„Ç¢Â§ßÂ≠¶ Â∑•Â≠¶ÈÉ® „Ç≥„É≥„Éî„É•„Éº„Çø„Çµ„Ç§„Ç®„É≥„ÇπÁßë (Co-op) Âçí |


## ÂêÑÁ®Æ„Ç¢„Ç´„Ç¶„É≥„Éà

#### „Éù„Éº„Éà„Éï„Ç©„É™„Ç™

<!-- Portfolio Website -->
<a href="https://chihiroanihr-portfolio.vercel.app/" style="font-weight: bold; display: flex; gap: 4px; max-width: fit-content; align-items: center; padding: 5px 7px; text-decoration: none; color: #7F6350; border: 1px solid #E2E2E3; border-radius: 2px;">
  <img src="https://chihiroanihr-portfolio.vercel.app/assets/logo-110f07e6.png" alt="Image description" width="28"/>
  RHINA's Portfolio Website
</a>

<p style="display: flex; gap: 8px; flex-wrap: wrap; margin-top: 14px;">
  <!-- Github -->
  <a href="https://github.com/chihiroanihr" target="_blank"><img alt="Github" src="https://img.shields.io/badge/chihiroanihr-12100E.svg?&style=flat-square&logo=Github&logoColor=white" /></a>
  <!-- Devpost -->
  <a href="https://devpost.com/chihiroanihr" target="_blank"><img alt="Devpost" src="https://img.shields.io/badge/chihiroanihr-003E54.svg?&style=flat-square&logo=Devpost&logoColor=white" /></a>
  <!-- Lapras -->
  <a href="https://lapras.com/public/rhina-kim" target="_blank"><img alt="Lapras" src="https://img.shields.io/badge/chihiroanihr-123379.svg?&style=flat-square&logo=https://github.com/chihiroanihr/resume/blob/master/docs/public/logos/lapras-logo.png&logoColor=white" /></a>
</p>

#### „ÇΩ„Éº„Ç∑„É£„É´

<p style="display: flex; gap: 8px; flex-wrap: wrap;">
  <!-- X -->
  <a href="https://x.com/chihiroanihr" target="_blank"><img alt="X" src="https://img.shields.io/badge/@chihiroanihr-000000.svg?&style=flat-square&logo=x&logoColor=white" /></a> 
  <!-- Qiita -->
  <a href="https://qiita.com/chihiroanihr" target="_blank"><img alt="Qiita" src="https://img.shields.io/badge/chihiroanihr-55C500.svg?&style=flat-square&logo=qiita&logoColor=white" /></a>
  <!-- Zenn -->
  <a href="https://zenn.dev/chihiroanihr" target="_blank"><img alt="Zenn" src="https://img.shields.io/badge/chihiroanihr-3EA8FF.svg?&style=flat-square&logo=Zenn&logoColor=white" /></a>
  <!-- Medium -->
  <a href="https://medium.com/@chihiroanihr" target="_blank"><img alt="Medium" src="https://img.shields.io/badge/@chihiroanihr-000000.svg?&style=flat-square&logo=Medium&logoColor=white" /></a>
  <!-- Note.com -->
  <a href="https://note.com/chihiroanihr" target="_blank"><img alt="Note" src="https://img.shields.io/badge/chihiroanihr-f0f0f0.svg?&style=flat-square&logo=https://github.com/chihiroanihr/resume/blob/master/docs/public/logos/note-logo.png&logoColor=white" /></a>
  <!-- Behance -->
  <a href="https://www.behance.net/chihiroanihr" target="_blank"><img alt="Behance" src="https://img.shields.io/badge/chihiroanihr-0057FF.svg?&style=flat-square&logo=Behance&logoColor=white" /></a>
  <!-- Dribbble -->
  <a href="https://dribbble.com/chihiroanihr" target="_blank"><img alt="Dribbble" src="https://img.shields.io/badge/chihiroanihr-EA4C89.svg?&style=flat-square&logo=Dribbble&logoColor=white" /></a>

  <!-- Speaker Deck -->
  <!-- <a href="https://speakerdeck.com/chihiroanihr" target="_blank"><img alt="SpeakerDeck" src="https://img.shields.io/badge/chihiroanihr-009287.svg?&style=flat-square&logo=SpeakerDeck&logoColor=white" /></a> -->
</p>

## ËÅ∑ÂãôÁµåÊ≠¥

:::details 2023/07„ÄúÁèæÂú®      [Gokoo](https://www.gokoo.ca/)

AI „Éò„ÉÉ„Éâ„Éè„É≥„ÉÜ„Ç£„É≥„Ç∞„Çµ„Éº„Éì„Çπ LAPRAS SCOUT „ÅÆÈñãÁô∫„ÄÇ
ÈñãÁô∫„É™„ÇΩ„Éº„Çπ„ÅåÈôê„Çâ„Çå„Çã‰∏≠„Åß„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆÂà©‰æøÊÄß„ÇíÈ´ò„ÇÅ„ÇãËøΩÂä†Ê©üËÉΩ„ÅÆË®≠Ë®à„ÉªÂÆüË£Ö„Çí‰∏ªÂ∞é„ÄÇÂæóÊÑè„Å®„Åô„Çã„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫„ÅÆÁµåÈ®ì„ÇíÊ¥ª„Åã„Åó„Å¶„ÄÅ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆÊîπÂñÑÊ¥ªÂãï„Çí„É™„Éº„Éâ„ÄÇ„Åæ„Åü„ÄÅ„É¢„Éñ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅÆ„É©„Ç§„ÉñÈÖç‰ø°„Å∏„ÅÆÂá∫Êºî„ÇÑ„Éï„É´„É™„É¢„Éº„ÉàÁí∞Â¢É„ÅßÊ∞óËªΩ„Å´Ë≥™Âïè„Åß„Åç„Çã bot ÈñãÁô∫„Å™„Å©„ÇíÈÄö„Åó„Å¶„ÄÅËâØ„ÅÑÁµÑÁπî‰Ωú„Çä„Å∏„ÅÆË≤¢ÁåÆ„ÇÇË°å„Å£„Å¶„ÅÑ„Çã„ÄÇ

- **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË¶èÊ®°Ôºö**
  - 3‰∫∫„ÉÅ„Éº„É†„Åß„ÅÆ„Çπ„ÇØ„É©„É†ÈñãÁô∫
- **‰ΩøÁî®ÊäÄË°ìÔºö**
  - TypeScript, Vue.js, Python, Django, gRPC, Docker, Kubernetes, CircleCI, GitHub Actions
- **ÊãÖÂΩì„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÔºö**
  - LAPRAS„ÉªLAPRAS SCOUT„ÅÆÈñãÁô∫„Éª‰øùÂÆà
    - Êï∞ÂçÅ‰∏áË°åË¶èÊ®°„ÅÆ„É¢„Éé„É™„Çπ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈñãÁô∫„Éª‰øùÂÆà„ÇíÊãÖÂΩì
    - Ê©üËÉΩÂçò‰Ωç„Åß„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åã„Çâ„ÄÅ„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÈñãÁô∫„ÄÅ‰∏ÄÈÉ®„Ç§„É≥„Éï„É©ÊßãÁØâ„ÇíÊ®™Êñ≠„Åó„Å¶ÊãÖÂΩì
  - ÈñãÁô∫ÁîüÁî£ÊÄßÂêë‰∏ä„ÅÆ„Åü„ÇÅ„ÅÆÂèñ„ÇäÁµÑ„Åø
    - [„É©„Ç§„Éñ„É©„É™„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„ÅÆ‰ªïÁµÑ„ÅøÊßãÁØâ](https://zenn.dev/ryo_kawamata/articles/6f878891cf0c51)
    - [„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆTypeScriptÂåñ](https://speakerdeck.com/kawamataryo/reinforcing-the-type)
    - Vue2„Åã„ÇâVue3„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„Éá„Éº„Éà
    - Jest„Åã„ÇâVitest„Å∏„ÅÆÁßªË°åÔºàÈÄ≤Ë°å‰∏≠Ôºâ
    - webpack„Åã„ÇâVite„Å∏„ÅÆÁßªË°åÔºàÈÄ≤Ë°å‰∏≠Ôºâ
    - Vuex„Åã„ÇâTanStackQuery„Å∏„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„ÅÆÁßªË°åÔºàÈÄ≤Ë°å‰∏≠Ôºâ
  - „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÊîπÂñÑ„ÉÅ„Éº„É†„ÅÆ„É™„Éº„ÉâÔºàÊîπÂñÑ„ÉÅ„Éº„É†„ÅÆÁµÑÊàê„ÄÅË™≤È°å„ÅÆÊï¥ÁêÜ„ÉªÂÆüË£ÖÔºâ
    - [„Éì„Ç∏„É•„Ç¢„É´„É™„Ç∞„É¨„ÉÉ„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà„ÅÆÂ∞éÂÖ•](https://zenn.dev/ryo_kawamata/articles/percy-cypress)
    - [„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË®àÊ∏¨Âü∫Áõ§„ÅÆÂ∞éÂÖ•](https://zenn.dev/ryo_kawamata/articles/webperf-watcher)
    - [„Ç≥„Éº„Éâ„Éô„Éº„ÇπÂÅ•ÂÖ®ÊÄß„ÅÆË©ï‰æ°Âü∫Áõ§„ÅÆÂ∞éÂÖ•](https://zenn.dev/ryo_kawamata/articles/create-frontend-dashboard)
    - Á§æÂÜÖÂãâÂº∑‰ºö„ÅÆ‰∏ªÂÇ¨ÔºàVue3ÂãâÂº∑‰ºö„Å™„Å©Ôºâ
  - Á§æÂÜÖË™≤È°å„ÇíËß£Ê±∫„Åô„ÇãSlack BotÈñãÁô∫
    - [Á§æÂÜÖÁî®Ë™ûËæûÂÖ∏Ê¥ªÊÄßÂåñ„ÅÆ„Åü„ÇÅ„ÅÆBot](https://zenn.dev/ryo_kawamata/articles/tell-me-bot-slack-app)
    - [ChatGPTÂïè„ÅÑÂêà„Çè„ÅõBot](https://zenn.dev/ryo_kawamata/articles/56ea2484320def)
    - AWS EC2ÈñãÁô∫Áí∞Â¢É„ÅÆËµ∑Âãï„ÉªÂÅúÊ≠¢Bot
  - „Ç®„É≥„Ç∏„Éã„Ç¢Êé°Áî®„Å∏„ÅÆË≤¢ÁåÆ
    - [TechBlog„ÅÆÊßãÁØâ](https://tech-blog.lapras.com/)
    - [Êé°Áî®Â∫ÉÂ†±„Å®„Åó„Å¶„É¢„Éñ„Éó„É≠ÁîüÈÖç‰ø°„ÅÆÂÆüÊñΩ](https://www.youtube.com/watch?v=lI8CjHspGFU&list=PLKbaztxP2P4hMeqQiOgqxVCcJjILnqfFc&ab_channel=LAPRAS%E5%85%AC%E5%BC%8F)
    - [SWEÈÅ∏ËÄÉË™≤È°å„ÅÆÊï¥ÂÇô](https://github.com/lapras-inc/exam-swe-template)
  - „Åù„ÅÆ‰ªñ
    - [VuePress + esa „Å´„Çà„Çã„Éâ„Ç≠„É•„É°„É≥„Éà„Çµ„Ç§„Éà„ÅÆÊßãÁØâ](https://zenn.dev/ryo_kawamata/articles/4bf52f97165058)
    - [ÂÖ¨ÈñãAPI„ÅÆÂà©Áî®‰æã„Å®„Åó„Å¶„ÅÆ„É©„Ç§„Éñ„É©„É™„ÅÆÊßãÁØâ](https://zenn.dev/ryo_kawamata/articles/6e161be042f3d1)
:::

:::details 2019/04„Äú2021/03 [Ê†™Âºè‰ºöÁ§æMisoca](https://www.yayoi-kk.co.jp/)

„ÇØ„É©„Ç¶„ÉâË´ãÊ±ÇÊõ∏ÁÆ°ÁêÜ„Çµ„Éº„Éì„Çπ Misoca „ÅÆÈñãÁô∫„ÉªÈÅãÁî®„ÄÇ

- **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË¶èÊ®°Ôºö**
  - Âπ≥Âùá 2„Äú4 ‰∫∫„ÉÅ„Éº„É†„Åß„ÅÆ„Ç¢„Ç∏„É£„Ç§„É´ÈñãÁô∫
- **‰ΩøÁî®ÊäÄË°ìÔºö**
  - TypeScript, Vue.js, Ruby, Ruby on Rails, GraphQL, Docker, AWS
- **ÂΩπÂâ≤Ôºö**
  - Ê©üËÉΩÊ§úË®éÔºà„Ç§„É≥„Çª„Éó„Ç∑„Éß„É≥„Éá„ÉÉ„Ç≠‰ΩúÊàê etcÔºâ„ÄÅË®≠Ë®à„ÄÅ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÄÅ„É¨„Éì„É•„Éº
- **ÊãÖÂΩì„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÔºö**
  - TypeScript + Vue.js „Åß„ÅÆ SPA ÈñãÁô∫
  - Ruby on Rails „Åß„ÅÆ„Éï„É≠„É≥„Éà„Éª„É¢„Éê„Ç§„É´„Ç¢„Éó„É™Âêë„Åë API „ÅÆÈñãÁô∫
  - „Éï„É≠„É≥„ÉàÂÖ®„Ç≥„Éº„Éâ„ÅÆ JavaScript „Åã„Çâ TypeScript „Å∏„ÅÆ„É™„Éó„É¨„Ç§„Çπ
  - „É¨„Ç¨„Ç∑„Éº„Ç≥„Éº„ÉâÔºàjQueryÔºâ„Åã„Çâ Vue.js „Å∏„ÅÆ„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞
  - GraphQL, Vue Composition API „Çí‰Ωø„Å£„ÅüÊñ∞Ê©üËÉΩ„ÅÆÈñãÁô∫
  - Á§æÂ§ñ„ÉªÁ§æÂÜÖÂãâÂº∑‰ºö„ÅÆ‰ºÅÁîªÈÅãÂñ∂

:::

:::details 2018/02„Äú2019/03 [„Ç®„É†„Çπ„É™„ÉºÊ†™Âºè‰ºöÁ§æ](https://corporate.m3.com/)

ÂåªÁôÇÂæì‰∫ãËÄÖÂêë„ÅëÁ∑èÂêàÂåªÁôÇÊÉÖÂ†±„Çµ„Éº„Éì„Çπ m3.com „ÅÆÈñãÁô∫„ÉªÈÅãÁî®„ÄÇ

- **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË¶èÊ®°Ôºö**
  - Âπ≥Âùá 1„Äú2 ‰∫∫„ÉÅ„Éº„É†„Åß„ÅÆÈñãÁô∫
- **‰ΩøÁî®ÊäÄË°ìÔºö**
  - TypeScript, Vue.js, Java, Spring Boot, Kotlin, Docker
- **ÂΩπÂâ≤Ôºö**
  - „Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÄÅ„É¨„Éì„É•„Éº„ÄÅ„ÉÅ„Éº„É†„Éì„É´„Éá„Ç£„É≥„Ç∞
- **ÊãÖÂΩì„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÔºö**
  - Java Áã¨Ëá™„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÅÆ„É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Åã„Çâ Spring Boot „Å∏„ÅÆ„É™„Éã„É•„Éº„Ç¢„É´
  - „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ Kotlin „ÅÆÂ∞éÂÖ•„ÄÅVue.js „Åß„ÅÆ SPA „Çµ„Ç§„ÉàÊßãÁØâ
  - Storybook „ÅÆÂ∞éÂÖ•„ÄÅ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„É©„Ç§„Éñ„É©„É™„ÅÆ‰ΩúÊàê

:::

:::details 2012/04„Äú2017/12 Ê∞¥Êà∏Â∏ÇÊ∂àÈò≤Êú¨ÈÉ®

Ê∂àÈò≤Â£´„Å®„Åó„Å¶Ê∂àÈò≤Ê¥ªÂãï„ÄÅÊïëÊÄ•Ê¥ªÂãï„Å´Âæì‰∫ã„Åô„ÇãÂÇç„ÇâÊïëÊÄ•Â†±ÂëäÊõ∏„ÅÆ‰ΩúÊàêÊîØÊè¥„Ç∑„Çπ„ÉÜ„É†„ÇíËá™‰Ωú„ÉªÈÅãÁî®„ÄÇ

- **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË¶èÊ®°Ôºö**
  - ÂÄã‰∫∫ÈñãÁô∫
- **‰ΩøÁî®ÊäÄË°ìÔºö**
  - JavaScript, Vue.js, Electron, Excel VBA
- **ÂΩπÂâ≤Ôºö**
  - Ê©üËÉΩÊ§úË®é„ÄÅË®≠Ë®à„ÄÅ„Éá„Ç∂„Ç§„É≥„ÄÅ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÄÅÂ∞éÂÖ•‰∫§Ê∏â
- **ÊãÖÂΩì„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÔºö**
  - Electron + Vue „Åß„ÅÆÂÖ•ÂäõÊîØÊè¥„Ç∑„Çπ„ÉÜ„É†„ÄÅExcel VBA „Åß„ÅÆÂ†±ÂëäÊõ∏„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„Ç´„Éº„ÅÆÈñãÁô∫
    - Âπ¥Èñì„Åß 4,000 ÊôÇÈñì„ÅÆÊ•≠ÂãôÊôÇÈñìÂâäÊ∏õ„Å´Ë≤¢ÁåÆ
    - [https://speakerdeck.com/kawamataryo/improvement-at-the-fire-department](https://speakerdeck.com/kawamataryo/improvement-at-the-fire-department)
:::

## ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ

<div style="display: grid; gap: 15px; grid-col; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));">

<div>

| Ë®ÄË™û                                                                                                                             | Ê•≠ÂãôÁµåÈ®ì |
| -------------------------------------------------------------------------------------------------------------------------------- | -------- |
| <img alt="TypeScript" src="https://img.shields.io/badge/-TypeScript-007ACC?style=flat-square&logo=typescript&logoColor=white" /> | 6Âπ¥      |
| <img alt="JavaScript" src="https://img.shields.io/badge/-JavaScript-F7DF1E?style=flat-square&logo=JavaScript&logoColor=white" /> | 6Âπ¥      |
| <img alt="Ruby" src="https://img.shields.io/badge/-Ruby-CC342D?style=flat-square&logo=Ruby&logoColor=white" />                   | 3Âπ¥      |
| <img alt="Python" src="https://img.shields.io/badge/-Python-3776AB?style=flat-square&logo=Python&logoColor=white" />             | 3Âπ¥      |
| <img alt="Elixir" src="https://img.shields.io/badge/-Elixir-4B275F?style=flat-square&logo=Elixir&logoColor=white" />             | 1Âπ¥      |
| <img alt="Kotlin" src="https://img.shields.io/badge/-Kotlin-0095D5?style=flat-square&logo=Kotlin&logoColor=white" />             | 1Âπ¥      |
| <img alt="Java" src="https://img.shields.io/badge/-Java-007396?style=flat-square&logo=Java&logoColor=white" />                   | 1Âπ¥      |

</div>

<div>

| „Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ                                                                                                                         | Ê•≠ÂãôÁµåÈ®ì |
| -------------------------------------------------------------------------------------------------------------------------------------- | -------- |
| <img alt="Vue" src="https://img.shields.io/badge/-Vue.js-4FC08D?style=flat-square&logo=Vue.js&logoColor=white" />                      | 6Âπ¥      |
| <img alt="React" src="https://img.shields.io/badge/-React-45b8d8?style=flat-square&logo=react&logoColor=white" />                      | 3Âπ¥      |
| <img alt="Ruby-on-Rails" src="https://img.shields.io/badge/-Rails-CC0000?style=flat-square&logo=Ruby-on-Rails&logoColor=white" />      | 3Âπ¥      |
| <img alt="Django" src="https://img.shields.io/badge/-Django-092E20?style=flat-square&logo=Django&logoColor=white" />                   | 3Âπ¥      |
| <img alt="Apollo" src="https://img.shields.io/badge/-Apollo%20GraphQL-311C87?style=flat-square&logo=apollo-graphql&logoColor=white" /> | 1Âπ¥      |
| <img alt="GraphQL" src="https://img.shields.io/badge/-GraphQL-E10098?style=flat-square&logo=graphql&logoColor=white" />                | 1Âπ¥      |
| <img alt="Firebase" src="https://img.shields.io/badge/-Firebase-FFCA28?style=flat-square&logo=Firebase&logoColor=white" />             | 3Âπ¥      |
| <img alt="Gatsby" src="https://img.shields.io/badge/-Gatsby-663399?style=flat-square&logo=Gatsby&logoColor=white" />                   | 1Âπ¥      |
| <img alt="Vite" src="https://img.shields.io/badge/-Vite-646CFF?style=flat-square&logo=Vite&logoColor=white" />                         | 2Âπ¥      |
| <img alt="Docker" src="https://img.shields.io/badge/-Docker-46a2f1?style=flat-square&logo=docker&logoColor=white" />                   | 6Âπ¥      |

</div>
</div>

## „Çπ„Ç≠„É´

- TypeScript, React, Vue.js „Åß„ÅÆ„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫„ÉªË®≠Ë®à
- „É¨„Ç¨„Ç∑„Éº„Ç≥„Éº„Éâ„Åã„Çâ„É¢„ÉÄ„É≥„Å™„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Å∏„ÅÆ„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞
- „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÈñãÁô∫Âü∫Áõ§„ÅÆÊï¥ÂÇôÔºà„ÉÜ„Çπ„ÉàÁí∞Â¢É„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË®àÊ∏¨ etc.Ôºâ
- „É¶„Éã„ÉÉ„Éà„ÉÜ„Çπ„Éà„ÇíÂü∫Êú¨„Å®„Åó„Åü‰øùÂÆàÊÄß„Å®ÂÜçÂà©Áî®ÊÄß„ÇíÊÑèË≠ò„Åó„Åü„Ç≥„Éº„Éá„Ç£„É≥„Ç∞
- Rails„É©„Ç§„ÇØ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„Çí‰Ωø„Å£„Åü„Çµ„Éº„Éê„Éº„Çµ„Ç§„ÉâÈñãÁô∫
- ÂãâÂº∑‰ºö„ÄÅÁ§æÂÜÖÂ≠¶Áøí„ÅÆ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£ÂΩ¢Êàê
- „Ç¢„Ç∏„É£„Ç§„É´„ÄÅ„Çπ„ÇØ„É©„É†ÈñãÁô∫„ÅÆÈÄ≤Ë°å
- Êú™ÁµåÈ®ìÊäÄË°ì„Å∏„ÅÆËøÖÈÄü„Å™„Ç≠„É£„ÉÉ„ÉÅ„Ç¢„ÉÉ„Éó„ÄÅ„Ç¢„Ç¶„Éà„Éó„ÉÉ„Éà

## Ë™ûÂ≠¶Âäõ

- Êó•Êú¨Ë™ûÔºö„Éç„Ç§„ÉÜ„Ç£„Éñ„É¨„Éô„É´
- Ëã±Ë™ûÔºö„Éç„Ç§„ÉÜ„Ç£„Éñ„É¨„Éô„É´
- ÈüìÂõΩË™ûÔºö„Éç„Ç§„ÉÜ„Ç£„Éñ„É¨„Éô„É´
- „Éï„É©„É≥„ÇπË™ûÔºöÊó•Â∏∏‰ºöË©±„É¨„Éô„É´

‚Äª „Éç„Ç§„ÉÜ„Ç£„Éñ„É¨„Éô„É´Ôºö‰ºöË©±„ÄÅÊñáÊõ∏Ë™≠Ëß£„ÄÅ„Éì„Ç∏„Éç„ÇπÊñáÊõ∏‰ΩúÊàê„ÄÅ„Éó„É¨„Çº„É≥„ÄÅ‰ºöË≠∞„ÄÅ„É°„Éº„É´‰∫§ÊèõÂèØËÉΩ

## ÊÑèÊ¨≤„ÉªËààÂë≥

- „É¶„Éº„Ç∂„Éº„Éï„Ç°„Éº„Çπ„Éà„Å™„Éó„É≠„ÉÄ„ÇØ„Éà„Çí‰Ωú„Å£„Å¶„ÅÑ„ÅèÈÅéÁ®ã„ÅåÂ•Ω„Åç„Åß„Åô„ÄÇË®Ä„Çè„Çå„Åü„Å®„Åä„Çä„Å´„Åü„Å†‰Ωú„Çã„ÅÆ„Åß„ÅØ„Å™„Åè„ÄÅÊ©üËÉΩË¶Å‰ª∂„Å´ÂØæ„Åó„Å¶„ÇÇ‰∏ÄÁ∑í„Å´ËÄÉ„Åà„Å¶„ÅÑ„Åë„Çã„ÉÅ„Éº„É†„Å†„Å®„Çà„ÇäËâØ„ÅÑ„Åß„Åô
- ÈñãÁô∫„Å´Êê∫„Çè„Å£„Åü„Çµ„Éº„Éì„Çπ„Åå„ÄÅË∫´Ëøë„Å™‰∫∫„ÅÆÁîüÊ¥ª„Çí„Çà„ÇäËâØ„Åè„Åó„Å¶„ÅÑ„ÅèÈÅéÁ®ã„ÇíËÇå„ÅßÊÑü„Åò„Çâ„Çå„ÇãÊôÇ„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅåÂá∫„Åõ„Çã„Å®ÊÑü„Åò„Å¶„ÅÑ„Åæ„Åô
- Â∞ë‰∫∫Êï∞„ÉÅ„Éº„É†„ÅßÂ∞è„Åï„ÅèÁ¥†Êó©„Åè„É™„É™„Éº„Çπ„Åó„ÄÅ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÂèó„Åë„Å™„Åå„ÇâÊîπÂñÑ„ÅÆ„Çµ„Ç§„ÇØ„É´„ÇíÂõû„Åó„Å¶„ÅÑ„Åè„Ç¢„Ç∏„É£„Ç§„É´„Å™ÈñãÁô∫„Çπ„Çø„Ç§„É´„ÇíÂ•Ω„Åø„Åæ„Åô
- „Å©„ÅÜ„Åó„Åü„Çâ‰Ωø„ÅÑ„ÇÑ„Åô„ÅÑ„Éá„Ç∂„Ç§„É≥„Å´„Å™„Çã„Åã„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆË¶ñÁÇπ„Å´Á´ã„Å£„Å¶ËÄÉ„Åà„Çã„Åì„Å®„ÅåÂ•Ω„Åç„Åß„Åô
- „Éö„Ç¢„Éó„É≠„Éª„É¢„Éñ„Éó„É≠„ÇíÁ©çÊ•µÁöÑ„Å´Âèñ„ÇäÂÖ•„Çå„ÄÅ„ÉÅ„Éº„É†„ÅßÊöóÈªôÁü•„ÅÆÂÖ±Êúâ„ÇÑ„ÄÅÊäÄË°ì„ÅÆÁ∂ôÊâø„ÇíË°å„Å£„Å¶„ÅÑ„Åç„Åü„ÅÑ„Å®ÊÄù„Å£„Å¶„ÅÑ„Åæ„Åô
- Êñ∞„Åó„ÅÑÊåëÊà¶ÔºàÊäÄË°ìÁöÑ„Å™„ÇÇ„ÅÆ„ÉªÂà∂Â∫¶ÁöÑ„Å™„ÇÇ„ÅÆÔºâ„Å´Á©çÊ•µÁöÑ„Å´Âèñ„ÇäÁµÑ„ÇÅ„ÇãÁí∞Â¢É„ÅåÂ•Ω„Åç„Åß„Åô

## Â∞±Ê•≠Êù°‰ª∂

- Âã§ÂãôÂΩ¢ÊÖã: „Éï„É´„É™„É¢„Éº„Éà„ÉØ„Éº„ÇØÔºàÊúàÊï∞ÂõûÁ®ãÂ∫¶„ÅÆÂá∫Á§æ„ÅØÂèØÔºâ


## Ê•≠ÂãôÂ§ñÊ¥ªÂãï

### OSS

<GitHubRepositories />

### „Ç¢„Ç¶„Éà„Éó„ÉÉ„Éà

#### Zenn
[https://zenn.dev/ryo_kawamata](https://zenn.dev/ryo_kawamata)

<ZennArticles />

#### Qiita
[https://qiita.com/ryo2132](https://qiita.com/ryo2132)

<QiitaArticles />

#### note
[https://note.com/ryo_kawamata](https://note.com/ryo_kawamata)

<NoteArticles />

#### SpeakerDeck
[https://speakerdeck.com/kawamataryo](https://speakerdeck.com/kawamataryo)

<SpeakerDeckSlides />

### ÂâØÊ•≠

- **ÈçºÁÅ∏Èô¢Â∞ÇÈñÄ„ÅÆ Web „Éá„Ç∂„Ç§„É≥‰∫ãÊ•≠Ôºà2017/02„ÄúÁèæÂú®Ôºâ**
  - ÊãÖÂΩìÔºöÂñ∂Ê•≠„Éª‰ºÅÁîª„Éª„Éá„Ç∂„Ç§„É≥„ÉªÂÆüË£Ö
  - ‰ΩøÁî®ÊäÄË°ìÔºöPHP, JavaScript, WordPress, Nuxt.js, GraphCMS
  - Â•ëÁ¥Ñ‰∫§Ê∏â„Åã„ÇâÂÆüË£Ö„Éª‰øùÂÆàÁÆ°ÁêÜ
- **„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ÂèóË®óÈñãÁô∫Ôºà2019/05„Äú2019/12Ôºâ**
  - ÊãÖÂΩìÔºöÂÆüË£Ö
  - ‰ΩøÁî®ÊäÄË°ìÔºöJavaScript, TypeScript, Vue.js, React, Firebase
  - ÂÖÉÂêåÂÉö„ÅåËµ∑Ê•≠„Åó„Åü‰ºöÁ§æ„ÅÆÂèóË®óÈñãÁô∫Ê•≠Âãô„ÅÆ„Çµ„Éù„Éº„Éà„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆÂÆüË£Ö„Çí‰∏ª„Å´Ë°å„ÅÜ
- **oviceÊ†™Âºè‰ºöÁ§æÔºà2023/06„Äú2023/12Ôºâ**
  - ÊãÖÂΩìÔºöÂÆüË£Ö
  - ‰ΩøÁî®ÊäÄË°ìÔºöTypeScript, React
  - BugFix, Êñ∞Ê©üËÉΩ„ÅÆ„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂÆüË£Ö„ÇíÊãÖÂΩì

### „Åù„ÅÆ‰ªñ

- **Podcast**
  - [„Åó„Åå„Å™„ÅÑ„É©„Ç∏„Ç™ sp.91„Äê„Ç≤„Çπ„Éà: KawamataRyo„ÄëÊ•Ω„Åó„ÅÑÂÖÉÊ∂àÈò≤Â£´„Åå„Ç®„É≥„Ç∏„Éã„Ç¢Ëª¢ËÅ∑„ÇíÊ±∫ÊÑè„Åó„ÅüÁêÜÁî±„ÄÅ„Åù„Åó„Å¶Êå´Êäò„Å®Âæ©Ê¥ª](https://shiganai.org/ep/sp91-KawamataRyo)
- **YouTube**
  - [Ê∂àÈò≤Â£´„Åã„Çâ„Ç®„É≥„Ç∏„Éã„Ç¢„Å∏Ôºà„Ç≤„Çπ„ÉàÔºöÂ∑ù‰ø£„Åï„ÇìÔºâ #„Ç®„É≥„Ç∏„Éã„Ç¢„Å®‰∫∫Áîü Vol.28](https://www.youtube.com/watch?v=bP8hTmGixuI&t=1587s)
- **JobPics**
  - [Ê∂àÈò≤Â£´„Åã„Çâ„Ç®„É≥„Ç∏„Éã„Ç¢„Å∏„ÄÅÁ©∂Ê•µ„ÅÆ„ÄåÊú™ÁµåÈ®ìËª¢ËÅ∑„Äç3„Å§„ÅÆ„Éù„Ç§„É≥„Éà | JobPicks](https://job.newspicks.com/articles/849)
- **type-challenges „ÅÆ„É°„É≥„Éê„ÉºÔºàÊó•Êú¨Ë™û„É≠„Éº„Ç´„É©„Ç§„Ç∫„ÇíÊãÖÂΩìÔºâ**
  - [type-challenges](https://github.com/type-challenges/type-challenges)
- Raycast Êã°ÂºµÊ©üËÉΩ„ÅÆÈñãÁô∫
  - [TinyPNG](https://www.raycast.com/kawamataryo/tinypng)
  - [esa Search](https://www.raycast.com/kawamataryo/esa-search)

================
File: pdf-configs/config.js
================
module.exports = {
  stylesheet: "./pdf-configs/style.css",
  body_class: "markdown-body",
  marked_options: {
    headerIds: false,
    smartypants: true,
  },
  pdf_options: {
    "format": "A4",
    "margin": "30mm 20mm",
    "printBackground": true,
    "headerTemplate": "<style>\n  section {\n    margin: 0 auto;\n    font-size: 9px;\n  }\n</style>",
    "footerTemplate": "<section>\n  <div>\n    <span class=\"pageNumber\"></span>\n    / <span class=\"totalPages\"></span>\n  </div>\n</section>"
  },
  stylesheet_encoding: "utf-8",
};

================
File: pdf-configs/style.css
================
@import url(//fonts.googleapis.com/earlyaccess/notosansjapanese.css);

body {
  font-size: 12px;
  font-family: "Noto Sans Japanese", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif;
}

h1:first-child {
  margin-top: 0;
  padding-top: 0;
  text-align: center;
  border-top: none;
}

h2 {
  padding-top: 40px;
}

h2:first-child {
  padding-top: 20px;
}

table {
  font-size: 11px;
  border-collapse: collapse;
}

td,
th {
  border: 1px solid #ddd;
  padding: 5px;
}

tr:nth-child(even) {
  background-color: #f2f2f2;
}

tr:hover {
  background-color: #ddd;
}

th {
  text-align: left;
  background-color: #ddd;
}

hr {
  border-top: 1px solid #ddd;
  margin: 30px 0;
}

================
File: .gitignore
================
node_modules
.DS_Store
**/*.pdf
.idea
.vscode
docs/.vitepress/cache
docs/.vitepress/dist

================
File: .textlintrc
================
{
  "rules": {
    "preset-ja-technical-writing": {
      "sentence-length": {
        "max": 120,
        "severity": "warning"
      },
      "max-comma": {
        "max": 3
      },
      "max-ten": {
        "max": 3
      },
      "max-kanji-continuous-len": {
        "max": 6
      },
      "arabic-kanji-numbers": true,
      "no-mix-dearu-desumasu": {
        "preferInHeader": "",
        "preferInBody": "„Åß„Åô„Åæ„Åô",
        "preferInList": "„Åß„ÅÇ„Çã",
        "strict": false
      },
      "ja-no-mixed-period": {
        "periodMark": "„ÄÇ",
        "severity": "warning"
      },
      "no-double-negative-ja": true,
      "no-dropping-the-ra": true,
      "no-doubled-conjunctive-particle-ga": {
        "severity": "warning"
      },
      "no-doubled-conjunction": true,
      "no-doubled-joshi": {
        "min_interval": 1,
        "severity": "warning"
      },
      "no-nfd": true,
      "no-invalid-control-character": false,
      "no-exclamation-question-mark": false,
      "no-hankaku-kana": true,
      "ja-no-weak-phrase": {
        "severity": "warning"
      },
      "ja-no-successive-word": true,
      "ja-no-abusage": true,
      "ja-no-redundant-expression": {
        "severity": "warning"
      },
      "ja-unnatural-alphabet": {
        "allow": [
          "/[A-Z]/"
        ],
        "allowCommonCase": true
      },
      "no-unmatched-pair": true,
      "max-kanji-continuous-len": false
    },
    "preset-jtf-style": {
      "1.1.1.Êú¨Êñá": true,
      "1.1.2.Ë¶ãÂá∫„Åó": true,
      "1.1.3.ÁÆáÊù°Êõ∏„Åç": true,
      "1.1.5.Âõ≥Ë°®„ÅÆ„Ç≠„É£„Éó„Ç∑„Éß„É≥": true,
      "1.2.1.Âè•ÁÇπ(„ÄÇ)„Å®Ë™≠ÁÇπ(„ÄÅ)": true,
      "1.2.2.„Éî„É™„Ç™„Éâ(.)„Å®„Ç´„É≥„Éû(,)": true,
      "2.1.2.Êº¢Â≠ó": false,
      "2.1.5.„Ç´„Çø„Ç´„Éä": false,
      "2.1.6.„Ç´„Çø„Ç´„Éä„ÅÆÈï∑Èü≥": false,
      "2.1.8.ÁÆóÁî®Êï∞Â≠ó": true,
      "2.1.9.„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„Éà": true,
      "2.1.10.ÁÆóÁî®Êï∞Â≠ó„ÅÆ‰ΩçÂèñ„Çä„ÅÆË°®Ë®ò": true,
      "2.2.1.„Å≤„Çâ„Åå„Å™„Å®Êº¢Â≠ó„ÅÆ‰Ωø„ÅÑÂàÜ„Åë": false,
      "2.2.2.ÁÆóÁî®Êï∞Â≠ó„Å®Êº¢Êï∞Â≠ó„ÅÆ‰Ωø„ÅÑÂàÜ„Åë": true,
      "2.2.3.‰∏ÄÈÉ®„ÅÆÂä©Êï∞Ë©û„ÅÆË°®Ë®ò": true,
      "3.1.1.ÂÖ®ËßíÊñáÂ≠ó„Å®ÂçäËßíÊñáÂ≠ó„ÅÆÈñì": false,
      "3.1.2.ÂÖ®ËßíÊñáÂ≠ó„Å©„ÅÜ„Åó": false,
      "3.2.„Ç´„Çø„Ç´„ÉäË™ûÈñì„ÅÆ„Çπ„Éö„Éº„Çπ„ÅÆÊúâÁÑ°": true,
      "3.3.„Åã„Å£„ÅìÈ°û„Å®Èö£Êé•„Åô„ÇãÊñáÂ≠ó„ÅÆÈñì„ÅÆ„Çπ„Éö„Éº„Çπ„ÅÆÊúâÁÑ°": true,
      "4.1.1.Âè•ÁÇπ(„ÄÇ)": true,
      "4.1.3.„Éî„É™„Ç™„Éâ(.)„ÄÅ„Ç´„É≥„Éû(,)": true,
      "4.2.1.ÊÑüÂòÜÁ¨¶(ÔºÅ)": true,
      "4.2.2.ÁñëÂïèÁ¨¶(Ôºü)": true,
      "4.2.4.‰∏≠Èªí(„Éª)": true,
      "4.2.5.Ê≥¢Á∑ö(„Äú)": true,
      "4.2.6.„Éè„Ç§„Éï„É≥(-)": true,
      "4.2.7.„Ç≥„É≠„É≥(Ôºö)": true,
      "4.2.8.„Çª„Éü„Ç≥„É≠„É≥(;)": true,
      "4.2.9.„ÉÄ„ÉÉ„Ç∑„É•(-)": true,
      "4.3.1.‰∏∏„Åã„Å£„ÅìÔºàÔºâ": true,
      "4.3.2.Â§ß„Åã„Å£„Åì[]": true,
      "4.3.3.„Åã„Åé„Åã„Å£„Åì„Äå„Äç": true,
      "4.3.4.‰∫åÈáç„Åã„Åé„Åã„Å£„Åì„Äé„Äè": true,
      "4.3.5.‰∫åÈáçÂºïÁî®Á¨¶": true,
      "4.3.6.‰∏≠„Åã„Å£„Åì{ }": true,
      "4.3.7.Â±±„Åã„Å£„Åì<>": true,
      "4.3.8.‰∏ÄÈáçÂºïÁî®Á¨¶": true
    },
    "preset-ja-spacing": {
      "ja-space-between-half-and-full-width": {
        "space": "always"
      },
      "ja-space-around-code": false,
      "ja-no-space-between-full-width": true,
      "ja-nakaguro-or-halfwidth-space-between-katakana": true,
      "ja-no-space-around-parentheses": true,
      "ja-space-after-exclamation": false,
      "ja-space-after-question": false,
      "ja-no-space-between-full-width": false
    },
    "spellcheck-tech-word": true,
    "period-in-list-item": {
      "periodMark": "",
      "periodMarks": [
        ".",
        "„ÄÇ",
        "Ôºé"
      ],
      "ignoreLinkEnd": true,
      "allowPeriodMarks": [],
      "allowEmoji": false,
      "forceAppendPeriod": false
    },
    "ja-hiragana-keishikimeishi": true,
    "ja-hiragana-fukushi": true,
    "ja-hiragana-hojodoushi": true,
    "@textlint-ja/textlint-rule-no-insert-dropping-sa": true,
    "prefer-tari-tari": false,
    "abbr-within-parentheses": true,
    "no-mixed-zenkaku-and-hankaku-alphabet": true,
    "footnote-order": true
  }
}

================
File: package.json
================
{
  "name": "resume",
  "version": "1.0.0",
  "description": "ÈáëÊÇßÂ®ú„ÅÆËÅ∑ÂãôÁµåÊ≠¥Êõ∏",
  "type": "module",
  "scripts": {
    "lint": "textlint docs/README.md",
    "build:pdf": "md-to-pdf docs/index.md --config-file ./pdf-configs/config.js",
    "dev": "vitepress dev docs",
    "docs:build": "vitepress build docs",
    "docs:preview": "vitepress preview docs"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/chihiroanihr/resume.git"
  },
  "keywords": [],
  "author": "Rhina Kim <chihiroanihr@gmail.com>",
  "devDependencies": {
    "@textlint-ja/textlint-rule-no-insert-dropping-sa": "^2.0.1",
    "autoprefixer": "^10.4.20",
    "husky": "^5.0.0",
    "md-to-pdf": "^5.2.4",
    "postcss": "^8.4.40",
    "sass": "^1.77.8",
    "tailwindcss": "^3.4.7",
    "textlint": "^14.0.4",
    "textlint-filter-rule-comments": "^1.2.2",
    "textlint-filter-rule-whitelist": "^2.0.0",
    "textlint-rule-abbr-within-parentheses": "^1.0.2",
    "textlint-rule-footnote-order": "^1.0.3",
    "textlint-rule-general-novel-style-ja": "^1.3.0",
    "textlint-rule-ja-hiragana-fukushi": "^1.3.0",
    "textlint-rule-ja-hiragana-hojodoushi": "^1.1.0",
    "textlint-rule-ja-hiragana-keishikimeishi": "^1.1.0",
    "textlint-rule-ja-unnatural-alphabet": "^2.0.1",
    "textlint-rule-ng-word": "^1.0.0",
    "textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet": "^1.0.1",
    "textlint-rule-period-in-list-item": "^1.0.1",
    "textlint-rule-prefer-tari-tari": "^1.0.3",
    "textlint-rule-preset-ja-spacing": "^2.4.3",
    "textlint-rule-preset-ja-technical-writing": "^10.0.1",
    "textlint-rule-preset-jtf-style": "^2.3.14",
    "textlint-rule-prh": "^6.0.0",
    "textlint-rule-spellcheck-tech-word": "^5.0.0",
    "vitepress": "^1.3.1"
  },
  "engines": {
    "node": "20.x"
  },
  "dependencies": {
    "@vueuse/core": "^10.11.0",
    "devicon": "^2.16.0",
    "ofetch": "^1.3.4",
    "open-graph-scraper": "^6.7.2"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.ja.md
================
# RHINA KIM „ÅÆËÅ∑ÂãôÁµåÊ≠¥Êõ∏„ÄÄ(forked from @kawamataryo)

![textlint](https://img.shields.io/github/workflow/status/chihiroanihr/resume/lint%20text?label=textlint&logo=github&color=yellow)
![build pdf](https://img.shields.io/github/workflow/status/chihiroanihr/resume/build-pdf?label=build%20pdf&logo=github)
![create issue](https://img.shields.io/github/workflow/status/chihiroanihr/resume/create%20issue?label=create%20issue&logo=github&color=orange)
![release date](https://img.shields.io/github/release-date/chihiroanihr/resume?color=blue&logo=github)

[ [English](https://github.com/chihiroanihr/resume) | Êó•Êú¨Ë™û ]

## Data


- [GitHub Pages](https://chihiroanihr.github.io/resume/)  
- [PDF](https://github.com/chihiroanihr/resume/releases)  
- [File](https://github.com/chihiroanihr/resume/blob/master/docs/index.md)  

## Features

### üíÖ Lint text

[textlint](https://github.com/textlint/textlint) „Åß„ÅÆËá™ÂãïÊ†°Ê≠£„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ

```
$ yarn lint --fix
```

[husky](https://github.com/typicode/husky) „Å´„Çà„Å£„Å¶commitÂâç„Å´„ÇÇËá™Âãï„ÅßÂÆüË°å„Åï„Çå„Åæ„Åô„ÄÇ  
Ê†°Ê≠£„ÅÆ„É´„Éº„É´„ÅØ`.textlintrc`„Å´Ë®òËºâ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ


### üìù Convert Markdown to PDF

[md-to-pdf](https://www.npmjs.com/package/md-to-pdf) „Åß„ÅÆPDFÁîüÊàê„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ

```
$ yarn build:pdf
```


Âá∫Âäõ„Åï„Çå„ÇãPDF„ÅØCSS„Åß‰ªªÊÑè„ÅÆ„Çπ„Çø„Ç§„É´„ÇíË®≠ÂÆöÂèØËÉΩ„Åß„Åô„ÄÇ`pdf-configs/style.css`„ÇíÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ  

### üõ† Create release

`v**` tag„Çí„Å§„Åë„Å¶push„Åô„Çã„Å®GitHub Actions„Åß„Éì„É´„Éâ„ÅåËµ∞„Çä„ÄÅPDF„ÅÆÁîüÊàê„ÄÅRelease„ÅÆ‰ΩúÊàê„ÄÅAssets„Å∏PDF„ÅÆÁôªÈå≤„ÅåÂÆüË°å„Åï„Çå„Åæ„Åô„ÄÇ

```
$ git commit -m "add job"
$ git tag v1.0
$ git push origin --tags
```

### üìÜ Remind update

GitHub Actions„ÅÆschedule trigger„Åß3„É∂Êúà„Å´1Âõû„ÄÅËÅ∑ÂãôÁµåÊ≠¥Êõ∏„ÅÆÂÜÖÂÆπÊõ¥Êñ∞„Çí‰øÉ„Åôissue„ÅåËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åô„ÄÇ

ÊúüÈñì„ÅÆÂ§âÊõ¥„ÄÅJob„ÅÆÂÅúÊ≠¢„ÅØ[.github/workflows/create-issue.yml](https://github.com/chihiroanihr/resume/blob/master/.github/workflows/create-issue.yml) „ÇíÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

================
File: README.md
================
# RHINA KIM's Resume (forked from @kawamataryo)


[![textlint](https://img.shields.io/github/actions/workflow/status/chihiroanihr/resume/lint-text.yml?label=textlint&logo=github&color=yellow)](https://github.com/chihiroanihr/resume/actions?query=workflow%3A%22lint+text%22)
[![build pdf](https://img.shields.io/github/actions/workflow/status/chihiroanihr/resume/build-pdf.yml?label=build%20pdf&logo=github)](https://github.com/chihiroanihr/resume/actions?query=workflow%3A%22build+pdf%22)
[![create issue](https://img.shields.io/github/actions/workflow/status/chihiroanihr/resume/create-issue.yml?label=create%20issue&logo=github&color=orange)](https://github.com/chihiroanihr/resume/actions?query=workflow%3A%22create+issue%22)
[![release date](https://img.shields.io/github/release-date/chihiroanihr/resume?color=blue&logo=github)](https://github.com/chihiroanihr/resume/releases)

[ English | [Êó•Êú¨Ë™û](https://github.com/chihiroanihr/resume/blob/master/README.ja.md) ]

## Data

- [GitHub Pages](https://chihiroanihr.github.io/resume/)  
- [PDF](https://github.com/chihiroanihr/resume/releases)  
- [File](https://github.com/chihiroanihr/resume/blob/master/docs/index.md)  
## Features

### üíÖ Lint text

Automatic proofreading with [textlint](https://github.com/textlint/textlint).

```
$ yarn lint --fix
```
It is also automatically executed when pre-commit by [husky](https://github.com/typicode/husky).  
proofreading rules are set with `.textlintrc`.



### üìù Convert Markdown to PDF

You can generate PDF with [md-to-pdf](https://www.npmjs.com/package/md-to-pdf).


```
$ yarn build:pdf
```

The output PDF can be styled as you like with CSS. Edit the `pdf-configs/style.css`.  

### üõ† Create release

When you push with a `v**` tag, GitHub Actions will run the build, generate the PDF, create a Release, and register the PDF to Assets.

```
$ git commit -m "add job"
$ git tag v1.0
$ git push origin --tags
```

### üìÜ Remind update

Automatically generate issues every three months with GitHub Actions Schedules triggers to prompt you to update your resume.

To change the duration or stop the job, edit `.github/workflows/create-issue.yml`.  
To change the issue contents, edit `.github/ISSUE_TEMPLATE.md`.

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    './docs/**/*.{html,js,vue,ts,md}',
    './docs/.vitepress/**/*.{html,js,vue,ts,md}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: vite-env.d.ts
================
/// <reference types="vite/client" />

declare const GITHUB_PAT: string
